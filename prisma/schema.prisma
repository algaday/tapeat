generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
  email     String           @unique
  password  String
  firstName String
  lastName  String
  owner     RestaurantOwner?
  customer  Customer?
}

model RestaurantOwner {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  restaurant Restaurant?

  user User @relation(fields: [userId], references: [id])
}

model Customer {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  address   String
  userId    String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  orders Order[]

  user User @relation(fields: [userId], references: [id])
}

model Restaurant {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  ownerId   String   @unique @db.Uuid
  orderId   String?  @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  branches RestaurantBranch[]
  orders   Order[]
  menus    MenuItem[]

  owner RestaurantOwner @relation(fields: [ownerId], references: [userId])
}

model RestaurantBranch {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  address      String
  restaurantId String   @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  branchMenuItems BranchMenuItem[]
  Storage         Storage[]

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
}

model MenuItem {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  nameOfDish   String
  category     String
  description  String
  price        Decimal  @db.Decimal(12, 2)
  restaurantId String   @db.Uuid
  imageId      String   @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  orderLines         OrderLine[]
  modificationGroups MenuItemModificationGroup[]
  branchMenuItems    BranchMenuItem[]

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  image      Image      @relation(fields: [imageId], references: [id])
}

model BranchMenuItem {
  id                 String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  restaurantBranchId String   @db.Uuid
  menuItemId         String   @db.Uuid
  isAvailable        Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())

  restaurantBranch RestaurantBranch @relation(fields: [restaurantBranchId], references: [id])
  menuItem         MenuItem         @relation(fields: [menuItemId], references: [id])
}

model Image {
  id                  String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  restaurantId        String?  @db.Uuid
  originalPath        String
  mediumThumbnailPath String?
  smallThumbnailPath  String?
  isAssigned          Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())

  menuItems MenuItem[]
}

model MenuItemModificationGroup {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  menuItemId     String   @db.Uuid
  modificationId String   @db.Uuid
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  menuItem          MenuItem          @relation(fields: [menuItemId], references: [id])
  modificationGroup ModificationGroup @relation(fields: [modificationId], references: [id])
}

model ModificationGroup {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  menuItem      MenuItemModificationGroup[]
  modifications Modification[]
}

model Modification {
  id                  String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  modificationGroupId String   @db.Uuid
  name                String
  price               Decimal  @default(0) @db.Decimal(12, 2)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())

  modificationGroup ModificationGroup @relation(fields: [modificationGroupId], references: [id])

  @@unique([modificationGroupId, name])
}

model Order {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customerId   String   @db.Uuid
  restaurantId String   @db.Uuid
  orderDate    DateTime @default(now())
  status       String
  totalAmount  Int
  freeDelivery Boolean  @default(false)
  address      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  orderLines OrderLine[]

  restaurant Restaurant @relation(fields: [id], references: [orderId])
  customer   Customer   @relation(fields: [customerId], references: [id])
}

model OrderLine {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  menuItemId String   @db.Uuid
  orderId    String   @db.Uuid
  quantity   Int
  totalPrice Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  menuItem MenuItem @relation(fields: [menuItemId], references: [id])
  order    Order    @relation(fields: [orderId], references: [id])
}

model Supplier {
  id       String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name     String
  contacts String
  bin      String
}

model Ingredient {
  id    String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name  String
  yield Decimal @db.Decimal(4, 2)
  unit  String

  recipeIngredients         RecipeIngredient[]
  inventoryCountIngredients InventoryCountIngredient[]
  storageIngredients        StorageIngredient[]
}

model Recipe {
  id                   String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                 String
  unit                 String
  yield                Decimal            @db.Decimal(5, 4)
  recipeIngredients    RecipeIngredient[] @relation("Recipe")
  subRecipeIngredients RecipeIngredient[] @relation("SubRecipe")

  storageIngredients StorageIngredient[]
}

model RecipeIngredient {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  recipeId     String      @db.Uuid
  ingredientId String?     @db.Uuid
  subRecipeId  String?     @db.Uuid
  quantity     Int
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  recipe       Recipe      @relation("Recipe", fields: [recipeId], references: [id])
  subRecipe    Recipe?     @relation("SubRecipe", fields: [subRecipeId], references: [id])
}

model InventoryCount {
  id   String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  date DateTime

  inventoryCountIngredient InventoryCountIngredient[]
}

model InventoryCountIngredient {
  id       String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  quantity Int

  ingredientId     String @db.Uuid
  inventoryCountId String @db.Uuid

  ingredient     Ingredient     @relation(fields: [ingredientId], references: [id])
  inventoryCount InventoryCount @relation(fields: [inventoryCountId], references: [id])
}

model Storage {
  id                 String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name               String
  restaurantBranchId String @db.Uuid

  restaurantBranch RestaurantBranch @relation(fields: [restaurantBranchId], references: [id])

  storageIngredients      StorageIngredient[]
  inventoryCountTemplates InventoryCountTemplate[]
}

model StorageIngredient {
  id           String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  storageId    String  @db.Uuid
  ingredientId String? @db.Uuid
  recipeId     String? @db.Uuid

  storages   Storage     @relation(fields: [storageId], references: [id])
  ingredient Ingredient? @relation(fields: [ingredientId], references: [id])
  recipe     Recipe?     @relation(fields: [recipeId], references: [id])
}

model InventoryCountTemplate {
  id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type      String
  storegeId String @db.Uuid

  storage Storage @relation(fields: [storegeId], references: [id])
}
