// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  password  String

  firstName String
  lastName  String
  
  owner RestaurantOwner?
  customer Customer?

}

model RestaurantOwner {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId String @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user   User @relation(fields: [userId], references: [id])
  restaurant Restaurant?
}

model Customer{
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  address String
  userId String @unique @db.Uuid
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders Order[]
}

model Restaurant{
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name String
  ownerId String @unique @db.Uuid
  orderId String? @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner RestaurantOwner @relation(fields: [ownerId], references: [userId])

  branches RestaurantBranch[]
  orders Order[]
  menus MenuItem[]
  modificationGroupds ModificationGroup[]
}

model RestaurantBranch{
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  address String
  restaurantId String @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  restaurant Restaurant @relation(fields: [restaurantId],  references: [id])
  branchMenuItems BranchMenuItem[]
}

model MenuItem{
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  nameOfDish String
  category String
  description String
  price Decimal @db.Decimal(12,2)
  restaurantId String @db.Uuid
  imageId String @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  orderLines OrderLine[]
  modificationGroups MenuItemModificationGroup[]
  image Image @relation(fields: [imageId], references: [id])
  branchMenuItems BranchMenuItem[]
}

model BranchMenuItem{
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  branchRestaurantId String @db.Uuid
  menuItemId String @db.Uuid
  isAvailable Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])
  branchRestaurant RestaurantBranch @relation(fields: [branchRestaurantId], references: [id])
}

model Image{
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  restaurantId String? @db.Uuid
  originalPath String
  mediumThumbnailPath String?
  smallThumbnailPath String?
  isAssigned Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  menuItems MenuItem[]
}

model MenuItemModificationGroup{
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  menuItemId String @db.Uuid
  modificationId String @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])
  modificationGroup ModificationGroup @relation(fields: [modificationId], references: [id])
}
model ModificationGroup {
  id String @id @default(uuid()) @db.Uuid
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  restaurantId String @db.Uuid

  menuItem MenuItemModificationGroup[]
  modifications Modification[]

  restaurant Restaurant? @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Modification {
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  modificationGroupId String @db.Uuid
  name String
  price Decimal @db.Decimal(12,2) @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  modificationGroup ModificationGroup @relation(fields: [modificationGroupId], references: [id], onDelete: Cascade)
  @@unique([modificationGroupId, name])
}

model Order{
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customerId String @db.Uuid 
  restaurantId String @db.Uuid
  orderDate DateTime @default(now())
  status String
  totalAmount Int
  freeDelivery Boolean    @default(false)
  address String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  restaurant Restaurant @relation(fields: [id], references: [orderId])
  customer Customer @relation(fields: [customerId],references: [id])
  orderLines OrderLine[]
}

model OrderLine{
  id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  menuItemId String @db.Uuid
  orderId String @db.Uuid 
  quantity Int
  totalPrice Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  menuItem MenuItem @relation(fields: [menuItemId],references: [id])
  order Order @relation(fields: [orderId],references: [id])
}