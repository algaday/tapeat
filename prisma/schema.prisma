generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  createdAt DateTime         @default(now())
  updatedAt DateTime
  email     String           @unique
  password  String
  firstName String
  lastName  String
  id        String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customer  Customer?
  owner     RestaurantOwner?
}

model RestaurantOwner {
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String      @unique @db.Uuid
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  restaurant Restaurant?
  user       User        @relation(fields: [userId], references: [id])
}

model Customer {
  address   String
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId    String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  orders    Order[]
}

model Restaurant {
  name                String
  id                  String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ownerId             String                @unique @db.Uuid
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deliveryFee         DeliveryTemplateFee[]
  menus               MenuItem[]
  modificationGroupds ModificationGroup[]
  orders              Order[]
  owner               RestaurantOwner       @relation(fields: [ownerId], references: [userId])
  branches            RestaurantBranch[]
}

model RestaurantBranch {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  address        String
  restaurantId   String           @db.Uuid
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  BranchMenuItem BranchMenuItem[]
  restaurant     Restaurant       @relation(fields: [restaurantId], references: [id])
  storages       Storage[]
}

model MenuItem {
  nameOfDish         String
  category           String
  description        String
  price              Decimal                     @db.Decimal(12, 2)
  id                 String                      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  restaurantId       String                      @db.Uuid
  imageId            String                      @db.Uuid
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  branchMenuItems    BranchMenuItem[]
  image              Image                       @relation(fields: [imageId], references: [id])
  restaurant         Restaurant                  @relation(fields: [restaurantId], references: [id])
  modificationGroups MenuItemModificationGroup[]
  orderItems         OrderItem[]
}

model BranchMenuItem {
  id                 String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  branchRestaurantId String           @db.Uuid
  menuItemId         String           @db.Uuid
  isAvailable        Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime
  RestaurantBranch   RestaurantBranch @relation(fields: [branchRestaurantId], references: [id])
  menuItem           MenuItem         @relation(fields: [menuItemId], references: [id])
}

model Image {
  originalPath        String
  isAssigned          Boolean    @default(false)
  createdAt           DateTime   @default(now())
  updatedAt           DateTime
  id                  String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  restaurantId        String?    @db.Uuid
  mediumThumbnailPath String?
  smallThumbnailPath  String?
  menuItems           MenuItem[]
}

model MenuItemModificationGroup {
  id                String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  menuItemId        String            @db.Uuid
  modificationId    String            @db.Uuid
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  menuItem          MenuItem          @relation(fields: [menuItemId], references: [id])
  modificationGroup ModificationGroup @relation(fields: [modificationId], references: [id])
}

model ModificationGroup {
  id                       String                      @id @default(uuid()) @db.Uuid
  name                     String
  createdAt                DateTime                    @default(now())
  updatedAt                DateTime                    @updatedAt
  restaurantId             String                      @db.Uuid
  maximumModifierSelection Int                         @default(0)
  minimunModifierSelection Int                         @default(0)
  menuItem                 MenuItemModificationGroup[]
  modifications            Modification[]
  restaurant               Restaurant                  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Modification {
  name                   String
  price                  Decimal                 @default(0) @db.Decimal(12, 2)
  id                     String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  modificationGroupId    String                  @db.Uuid
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  isMandatory            Boolean                 @default(false)
  modificationGroup      ModificationGroup       @relation(fields: [modificationGroupId], references: [id], onDelete: Cascade)
  orderItemModifications OrderItemModification[]

  @@unique([modificationGroupId, name])
}

model Order {
  orderDate    DateTime    @default(now())
  status       String      @default("pending")
  totalAmount  Decimal     @db.Decimal(12, 2)
  freeDelivery Boolean     @default(false)
  address      String
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  customerId   String      @db.Uuid
  restaurantId String      @db.Uuid
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  comments     String?
  phoneNumber  String
  orderFee     Decimal     @db.Decimal(12, 2)
  subtotal     Decimal     @db.Decimal(12, 2)
  customer     Customer    @relation(fields: [customerId], references: [id])
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
}

model OrderItem {
  id                     String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  menuItemId             String                  @db.Uuid
  orderId                String                  @db.Uuid
  quantity               Int
  price                  Decimal                 @default(0) @db.Decimal(12, 2)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  menuItem               MenuItem                @relation(fields: [menuItemId], references: [id])
  order                  Order                   @relation(fields: [orderId], references: [id])
  orderItemModifications OrderItemModification[]
}

model OrderItemModification {
  id             String       @id @default(uuid()) @db.Uuid
  orderItemId    String       @db.Uuid
  modificationId String       @db.Uuid
  quantity       Int
  price          Decimal      @default(0) @db.Decimal(12, 2)
  modification   Modification @relation(fields: [modificationId], references: [id])
  orderItem      OrderItem    @relation(fields: [orderItemId], references: [id])
}

model DeliveryTemplateFee {
  id             String     @id @default(uuid()) @db.Uuid
  restaurantId   String     @db.Uuid
  minOrderAmount Decimal    @default(0) @db.Decimal(12, 2)
  deliveryFee    Decimal    @default(0) @db.Decimal(12, 2)
  restaurant     Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([restaurantId, minOrderAmount])
}

model Ingredient {
  id    String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name  String
  yield Decimal @db.Decimal(5, 4)
  unit  String

  recipeIngredients         RecipeIngredient[]
  inventoryCountIngredients InventoryCountIngredient[]
  storageIngredients        StorageIngredient[]
}

model Recipe {
  id                     String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                   String
  unit                   String
  yield                  Decimal @db.Decimal(5, 4)
  isAvailableInInventory Boolean @default(false)

  recipeIngredients    RecipeIngredient[] @relation("Recipe")
  subRecipeIngredients RecipeIngredient[] @relation("SubRecipe")

  storageIngredients StorageIngredient[]
}

model RecipeIngredient {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  recipeId     String      @db.Uuid
  ingredientId String?     @db.Uuid
  subRecipeId  String?     @db.Uuid
  quantity     Int
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  recipe       Recipe      @relation("Recipe", fields: [recipeId], references: [id])
  subRecipe    Recipe?     @relation("SubRecipe", fields: [subRecipeId], references: [id])
}

model InventoryCount {
  id   String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  date DateTime

  inventoryCountIngredient InventoryCountIngredient[]
}

model InventoryCountIngredient {
  id       String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  quantity Int

  ingredientId     String @db.Uuid
  inventoryCountId String @db.Uuid

  ingredient     Ingredient     @relation(fields: [ingredientId], references: [id])
  inventoryCount InventoryCount @relation(fields: [inventoryCountId], references: [id])
}

model Storage {
  id                 String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name               String
  restaurantBranchId String @db.Uuid

  restaurantBranch RestaurantBranch @relation(fields: [restaurantBranchId], references: [id])

  storageIngredients             StorageIngredient[]
  inventoryCountTemplateStorages InventoryCountTemplateStorage[]
}

model StorageIngredient {
  id           String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  storageId    String  @db.Uuid
  ingredientId String? @db.Uuid
  recipeId     String? @db.Uuid

  storages   Storage     @relation(fields: [storageId], references: [id])
  ingredient Ingredient? @relation(fields: [ingredientId], references: [id])
  recipe     Recipe?     @relation(fields: [recipeId], references: [id])
}

model InventoryCountTemplate {
  id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type      String
  storegeId String @db.Uuid

  inventoryCountTemplateStorages InventoryCountTemplateStorage[]
}

model InventoryCountTemplateStorage {
  id                       String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  storegeId                String @db.Uuid
  inventoryCountTempleteId String @db.Uuid

  storage                Storage                @relation(fields: [storegeId], references: [id])
  inventoryCountTemplete InventoryCountTemplate @relation(fields: [inventoryCountTempleteId], references: [id])
}
